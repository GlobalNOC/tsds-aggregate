<config>

  <!-- information for the workers, only needs to be set up
       for machines running workers-->
  <worker>
    <!-- how many concurrent workers should perform the necessary aggregations -->
    <num-processes>4</num-processes>

    <!-- where should we write the aggregator worker pid file to -->
    <pid-file>/var/run/tsds-aggregate-workers.pid</pid-file>

    <!-- tsds webservice connection info -->
    <tsds>
      <cloud>GlobalNOC</cloud>
      <username>username</username>
      <password>password</password>
      <realm>realm</realm>
    </tsds>    

  </worker>

  <!-- information for the master process, only needs to be set up
       for the one machine running the master. One master per cloud! -->
  <master>
 
    <!-- how many measurements to process in a single batch -->
    <num_concurrent_measurements>10</num_concurrent_measurements>

    <!-- how many measurements to include in a single rabbit message -->
    <num_messages>10</num_messages>

    <!-- how many documents can be read in a single block. This should be greater than
         the num_concurrent_measurements to avoid extra looping. A single ->find from the
         data collections will retrieve this many at most, avoiding timeouts on very
         large requests if a lot of documents have been dirtied -->
    <max_docs_per_block>100</max_docs_per_block>

    <!-- how long in seconds to hold redis locks (unlikely you should have to change this) -->
    <lock_timeout>120</lock_timeout>
   
    <!-- where should we write the aggregator master pid file to -->
    <pid-file>/var/run/tsds-aggregate-daemon.pid</pid-file>

    <!-- redis connection information for distributed locking -->
    <redis>
      <host>127.0.0.1</host>
      <port>6379</port>
    </redis>

    <!-- mongo connection information -->
    <mongo>
      <host>127.0.0.1</host>
      <port>27017</port>
      <username>needs_rw</username>
      <password>rw_password</password>
    </mongo>

  </master>

  <!-- rabbitmq connection info -->
  <rabbit>
    <host>127.0.0.1</host>
    <port>5672</port>
    <pending-queue>timeseries_pending_aggregate</pending-queue>
    <finished-queue>timeseries_finished_aggregate</finished-queue>
  </rabbit>
  
</config>
